#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[CSharp Command Injection 1]
Title: C# Potential Command Injection
Regex: (=\s+new\s+Process)
Message: C# reference to a potential Command Injection
Action: Ensure the application uses the .NET API Process.Start (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[CSharp Command Injection 2]
Title: C# Potential Command Injection
Regex: (=\snew\sProcessStartInfo)
Message: C# reference to a potential Command Injection
Action: Ensure the application uses the .NET API Process.Start (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[CSharp Command Injection 3]
Title: C# Potential Command Injection
Regex: (new\s+System\.Diagnostics\.Process\()
Message: C# reference to a potential Command Injection
Action: Ensure the application uses the .NET API Process.Start (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[CSharp Command Injection 4]
Title: C# Potential Command Injection
Regex: (\.StartInfo\.FileName\s+=)
Message: C# reference to a potential Command Injection
Action: Ensure the application uses the .NET API Process.Start (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[CSharp Command Injection 6]
Title: C# Potential Command Injection
Regex: (System\.Diagnostics\.Process\.Start)
Message: C# reference to a potential Command Injection
Action: Ensure the application uses the .NET API Process.Start (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[CSharp SQL Injection 1]
Title: C# Potential SQL Injection Injection
Regex: (new\s+SqlConnection\()
Message: C# reference to a potential SQL Injection
Action: Ensure the SQL code has been parameterized
Explanation: Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
CWE: CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
References: https://cwe.mitre.org/data/definitions/89.html,https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types,https://blogs.msdn.microsoft.com/sqlphp/2008/09/30/how-and-why-to-use-parameterized-queries/,
Confidence: Low 
RiskLevel: 1
[CSharp SQL Injection 2]
Title: C# Potential SQL Injection Injection
Regex: (new\s+SqlCommand\()
Message: C# reference to a potential SQL Injection
Action: Ensure the SQL code has been parameterized
Explanation: Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
CWE: CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
References: https://cwe.mitre.org/data/definitions/89.html,https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types,https://blogs.msdn.microsoft.com/sqlphp/2008/09/30/how-and-why-to-use-parameterized-queries/,
Confidence: Low
RiskLevel: 1
[CSharp XSS 1]
Title: C# Potential XSS
Regex: ((?i)validateRequest\s*=\s*["'](false)["'])
Message: CSharp reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1
[CSharp Encryption 1]
Title: C# Possible Data Encryption Initalization Vector
Regex: (\.iv\s+)
Message: CSharp reference to an encryption Initalization Vector (IV)
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 2]
Title: C# Possible Data Encryption Key Value
Regex: (\.key\s+)
Message: CSharp reference to an encryption Key Value
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 3]
Title: C# Possible Data Encryption Key Size Reference
Regex: (keysize\s+)
Message: CSharp reference to an encryption Key Size Reference
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 4]
Title: C# Possible Data Encryption System.Security.Cryptography
Regex: (Cryptography)
Message: CSharp reference to an encryption class System.Security.Cryptography
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 5]
Title: C# Possible Data Encryption Cipher Mode
Regex: (CipherMode)
Message: CSharp reference to an encryption Cipher Mode
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 6]
Title: C# Possible Data Encryption Rijndael Algorithm
Regex: (Rijndael)
Message: CSharp reference to an encryption Rijndael Algorithm
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 7]
Title: C# Possible Reference to Encryption method
Regex: (Encrypt)
Message: CSharp Reference to Encryption method
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Encryption 8]
Title: C# Possible Reference to Decryption method
Regex: (Decrypt)
Message: CSharp Reference to Decryption method
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded cryptographic keys cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded cryptographic keys are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-321: Use of Hard-coded Cryptographic Key
References: https://cwe.mitre.org/data/definitions/321.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[CSharp Hardcoded Password 1]
Title: C# Possible Hardcoded Password
Regex: (password)
Message: Potentially hard coded password found
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded passwords cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded passwords are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-259: Use of Hard-coded Password
References: https://cwe.mitre.org/data/definitions/259.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
