#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[VB Command Injection 1]
Title: VB Potential Command Injection
Regex: (Interaction.Shell\(["'])
Message: A reference to a potential Command Injection
Action: Ensure the application is encoding user input with HTMLEncode() and stripping out any malicious characters before passing to a command shell.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
#[VB XSS 1]
#Title: Potential XSS
#Regex: ((?i)\.(Text)\s*=\s*.+\&)
#Message: VB reference to a potential XSS
#Action: Ensure the input from user is not being passed back as output without being sanitized
#Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
#CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
#References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
#Confidence: Low
#RiskLevel: 1
