#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[C Buffer Overflow 1]
Title: C Potential Buffer Overflow strcpy
Regex: (strcpy\()
Message: A reference to a potential Buffer Overflow instance
Action: The upper limit of the string size should be specified using a function like strncpy or strncat.
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 2]
Title: C Potential Buffer Overflow gets
Regex: (gets\()
Message: A reference to a potential Buffer Overflow instance
Action: To safely use string functions you will need to know exactly how many characters you will be reading. Using fgets, gets_s or getline are more secure options.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 3]
Title: C Potential Buffer Overflow scanf
Regex: (scanf\()
Message: A reference to a potential Buffer Overflow instance
Action: To safely use string functions you will need to know exactly how many characters you will be reading. Using scanf_s, fscanf_s or sscanf_s are more secure options.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 4]
Title: C Potential Buffer Overflow sprintf
Regex: (sprintf\()
Message: A reference to a potential Buffer Overflow instance
Action: To safely use string functions you will need to know exactly how many characters you will be reading. Using snprintf() can be more secure but should still be used with caution.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 5]
Title: C Potential Buffer Overflow strcat
Regex: (strcat\()
Message: A reference to a potential Buffer Overflow instance
Action: To safely use string functions you will need to know exactly how many characters you will be reading. Using strncat() can be more secure but should still be used with caution.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 6]
Title: C Potential Heap-based Buffer Overflow malloc
Regex: (malloc\()
Message: A reference to a potential Buffer Overflow instance
Action: Given the option, use new rather than malloc.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-122: Heap-based Buffer Overflow
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 7]
Title: C Potential Heap-based Buffer Overflow calloc
Regex: (calloc\()
Message: A reference to a potential Buffer Overflow instance
Action: Given the option, use new rather than calloc.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-122: Heap-based Buffer Overflow
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 8]
Title: C Potential Heap-based Buffer Overflow free
Regex: (free\()
Message: A reference to a potential Buffer Overflow instance
Action: Given the option, use delete rather than free.  
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-122: Heap-based Buffer Overflow
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 9]
Title: C Potential Buffer Overflow strcpy
Regex: (strncpy\()
Message: A reference to a potential Buffer Overflow instance
Action: The upper limit of the string size should be specified and set to a resonable number.
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Low
RiskLevel: 1
[C Buffer Overflow 10]
Title: C Potential Buffer Overflow memcopy
Regex: (memcpy\()
Message: A reference to a potential Buffer Overflow instance
Action: The upper limit of the memory bounds should be specified and set to a resonable number.
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 11]
Title: C Potential Buffer Overflow memmove
Regex: (memmove\()
Message: A reference to a potential Buffer Overflow instance
Action: The upper limit of the memory bounds should be specified and set to a resonable number.
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Buffer Overflow 12]
Title: C Potential Buffer Overflow array value with variable position
Regex: ([a-zA-Z0-9_\-\.]+\[[a-zA-Z0-9_\-\.\(\)]+\])
Message: A reference to a potential Buffer Overflow instance
Action: The array size limit should be enforces to prevent the memory bounds from being exceeded, which could lead to a buffer overflow vulnerability.
Explanation: Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.
CWE: CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
References: https://cwe.mitre.org/data/definitions/120.html
Confidence: Medium
RiskLevel: 2
[C Command Injection 1]
Title: C Potential Command Injection
Regex: (CreateProcessW\()
Message: C reference to a potential Command Injection
Action: Ensure user input is not being passed to the system command
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
