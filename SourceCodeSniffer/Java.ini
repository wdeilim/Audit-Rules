#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[Java Command Injection 1]
Title: Potential Command Injection
Regex: (Runtime\.exec)
Message: JAVA reference to a potential Command Injection
Action: Ensure the application uses the Java API Runtime.exec (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 3
[Java Command Injection 2]
Title: Potential Command Injection
Regex: (Runtime\.getRuntime)
Message: JAVA reference to a potential Command Injection
Action: Ensure the application uses the Java API Runtime.exec (that does not support shell metacharacters) to launch a specific process, rather than passing a command string to a shell interpreter that supports command chaining and redirection.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 3
[Java Database Connection]
Title: Potential Command Injection
Regex: (DriverManager\.getConnection)
Message: JAVA reference to a database connection. Check for hard-coded credentials.
Action: Check to see that encryption keys and IVs are not hardcoded in the source.  These should be managed using the Windows DPAPI and the ProtectedData class in C#.
Explanation: Hard-coded passwords cannot be easily changed by the end user and remain for the lifetime of a system. If hard-coded passwords are used, malicious users will eventaully gain access to the key and compromise the system it was created to protect.
CWE: CWE-259: Use of Hard-coded Password
References: https://cwe.mitre.org/data/definitions/259.html,https://www.owasp.org/index.php/Use_of_hard-coded_password
Confidence: Low
RiskLevel: 1
[Java XSS 1]
Title: Potential XSS
Regex: (PrintWriter)
Message: Java reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1
[Java XSS 2]
Title: Potential XSS
Regex: (org\.apache\.struts\.action)
Message: Java reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1
[Java XSS 3]
Title: Potential XSS
Regex: (ActionMessage)
Message: Java reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1

