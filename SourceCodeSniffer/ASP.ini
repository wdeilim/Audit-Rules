#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[ASP Command Injection 1]
Title: ASP Classic Potential Command Injection
Regex: (CreateObject\(\s*\"WScript.Shell\"\s*\))
Message: A reference to a potential Command Injection
Action: Ensure the application is encoding user input with Server.HTMLEncode() and stripping out any malicious characters before passing to a command shell.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Medium
RiskLevel: 2
[ASP Command Injection 2]
Title: ASP Classic Potential Command Injection
Regex: (CreateObject\(\s*)
Message: A reference to a potential Command Injection
Action: Ensure the application is encoding user input with Server.HTMLEncode() and stripping out any malicious characters before passing to a command shell.
Explanation: Command Injection occurs when an applicationd does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component
CWE: CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')
References: https://cwe.mitre.org/data/definitions/77.html,https://cwe.mitre.org/data/definitions/78.html,https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet,https://www.owasp.org/index.php/Reviewing_Code_for_OS_Injection,https://www.owasp.org/index.php/Command_Injection,https://portswigger.net/knowledgebase/issues/details/00100100_oscommandinjection
Confidence: Low
RiskLevel: 1
[ASP SQL Command Injection 1]
Title: ASP Classic Potential Command Injection
Regex: (Server\.CreateOject\(["']ADODB\.Command)
Message: A reference to a potential SQL injection
Action: Ensure the SQL code has been parameterized
Explanation: Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
CWE: CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
References: https://cwe.mitre.org/data/definitions/89.html,https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types,https://blogs.msdn.microsoft.com/sqlphp/2008/09/30/how-and-why-to-use-parameterized-queries/,
Confidence: Low
RiskLevel: 1
[ASP SQL RecordSet Injection 1]
Title: ASP Classic Potential Command Injection
Regex: (Server\.CreateOject\(["']ADODB\.RecordSet)
Message: A reference to a potential SQL injection
Action: Ensure the SQL code has been parameterized
Explanation: Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
CWE: CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
References: https://cwe.mitre.org/data/definitions/89.html,https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types,https://blogs.msdn.microsoft.com/sqlphp/2008/09/30/how-and-why-to-use-parameterized-queries/,
Confidence: Low
RiskLevel: 1
[ASP RecordSet Open Injection 1]
Title: ASP Classic Potential Command Injection
Regex: (rs\.open)
Message: A reference to a potential SQL injection
Action: Ensure the SQL code has been parameterized
Explanation: Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
CWE: CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
References: https://cwe.mitre.org/data/definitions/89.html,https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types,https://blogs.msdn.microsoft.com/sqlphp/2008/09/30/how-and-why-to-use-parameterized-queries/,
Confidence: Low
RiskLevel: 1
[ASP XSS 1]
Title: ASP Classic Potential XSS
Regex: ((?i)Response\.Write\s*.+\&)
Message: ASP reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1

